/* tslint:disable */
/* eslint-disable */
/**
 * Fasterbase
 * Fasterbase API description
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AcceptDto } from '../models';
import { ActionDto } from '../models';
import { ActionModel } from '../models';
import { ActionSourceDto } from '../models';
import { FlowDto } from '../models';
import { FlowModel } from '../models';
import { GetActionType } from '../models';
import { GetActionsList } from '../models';
import { GetFlows } from '../models';
import { GetVariablesInFlow } from '../models';
import { UpdateActionDto } from '../models';
/**
 * ActionsApi - axios parameter creator
 * @export
 */
export const ActionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} actionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAction: async (actionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'actionId' is not null or undefined
            if (actionId === null || actionId === undefined) {
                throw new RequiredError('actionId','Required parameter actionId was null or undefined when calling deleteAction.');
            }
            const localVarPath = `/action/{actionId}`
                .replace(`{${"actionId"}}`, encodeURIComponent(String(actionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} actionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAction: async (actionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'actionId' is not null or undefined
            if (actionId === null || actionId === undefined) {
                throw new RequiredError('actionId','Required parameter actionId was null or undefined when calling getAction.');
            }
            const localVarPath = `/action/{actionId}`
                .replace(`{${"actionId"}}`, encodeURIComponent(String(actionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActionType: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/action/type`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/action/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableActionSource: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/action/source`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} actionId 
         * @param {string} flowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFlow: async (actionId: string, flowId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'actionId' is not null or undefined
            if (actionId === null || actionId === undefined) {
                throw new RequiredError('actionId','Required parameter actionId was null or undefined when calling getFlow.');
            }
            // verify required parameter 'flowId' is not null or undefined
            if (flowId === null || flowId === undefined) {
                throw new RequiredError('flowId','Required parameter flowId was null or undefined when calling getFlow.');
            }
            const localVarPath = `/action/{actionId}/flow/{flowId}`
                .replace(`{${"actionId"}}`, encodeURIComponent(String(actionId)))
                .replace(`{${"flowId"}}`, encodeURIComponent(String(flowId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} actionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFlows: async (actionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'actionId' is not null or undefined
            if (actionId === null || actionId === undefined) {
                throw new RequiredError('actionId','Required parameter actionId was null or undefined when calling getFlows.');
            }
            const localVarPath = `/action/{actionId}/flow`
                .replace(`{${"actionId"}}`, encodeURIComponent(String(actionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} actionId 
         * @param {string} priority 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariablesInFlow: async (actionId: string, priority: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'actionId' is not null or undefined
            if (actionId === null || actionId === undefined) {
                throw new RequiredError('actionId','Required parameter actionId was null or undefined when calling getVariablesInFlow.');
            }
            // verify required parameter 'priority' is not null or undefined
            if (priority === null || priority === undefined) {
                throw new RequiredError('priority','Required parameter priority was null or undefined when calling getVariablesInFlow.');
            }
            const localVarPath = `/action/{actionId}/{priority}/variables`
                .replace(`{${"actionId"}}`, encodeURIComponent(String(actionId)))
                .replace(`{${"priority"}}`, encodeURIComponent(String(priority)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ActionDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newAction: async (body: ActionDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling newAction.');
            }
            const localVarPath = `/action`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FlowDto} body 
         * @param {string} actionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newFlow: async (body: FlowDto, actionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling newFlow.');
            }
            // verify required parameter 'actionId' is not null or undefined
            if (actionId === null || actionId === undefined) {
                throw new RequiredError('actionId','Required parameter actionId was null or undefined when calling newFlow.');
            }
            const localVarPath = `/action/{actionId}/flow`
                .replace(`{${"actionId"}}`, encodeURIComponent(String(actionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} actionId 
         * @param {string} flowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFlow: async (actionId: string, flowId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'actionId' is not null or undefined
            if (actionId === null || actionId === undefined) {
                throw new RequiredError('actionId','Required parameter actionId was null or undefined when calling removeFlow.');
            }
            // verify required parameter 'flowId' is not null or undefined
            if (flowId === null || flowId === undefined) {
                throw new RequiredError('flowId','Required parameter flowId was null or undefined when calling removeFlow.');
            }
            const localVarPath = `/action/{actionId}/flow/{flowId}`
                .replace(`{${"actionId"}}`, encodeURIComponent(String(actionId)))
                .replace(`{${"flowId"}}`, encodeURIComponent(String(flowId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateActionDto} body 
         * @param {string} actionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAction: async (body: UpdateActionDto, actionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateAction.');
            }
            // verify required parameter 'actionId' is not null or undefined
            if (actionId === null || actionId === undefined) {
                throw new RequiredError('actionId','Required parameter actionId was null or undefined when calling updateAction.');
            }
            const localVarPath = `/action/{actionId}`
                .replace(`{${"actionId"}}`, encodeURIComponent(String(actionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ActionsApi - functional programming interface
 * @export
 */
export const ActionsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} actionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAction(actionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AcceptDto>>> {
            const localVarAxiosArgs = await ActionsApiAxiosParamCreator(configuration).deleteAction(actionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} actionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAction(actionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ActionModel>>> {
            const localVarAxiosArgs = await ActionsApiAxiosParamCreator(configuration).getAction(actionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActionType(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GetActionType>>> {
            const localVarAxiosArgs = await ActionsApiAxiosParamCreator(configuration).getActionType(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GetActionsList>>> {
            const localVarAxiosArgs = await ActionsApiAxiosParamCreator(configuration).getActions(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAvailableActionSource(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ActionSourceDto>>> {
            const localVarAxiosArgs = await ActionsApiAxiosParamCreator(configuration).getAvailableActionSource(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} actionId 
         * @param {string} flowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFlow(actionId: string, flowId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<FlowModel>>> {
            const localVarAxiosArgs = await ActionsApiAxiosParamCreator(configuration).getFlow(actionId, flowId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} actionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFlows(actionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GetFlows>>> {
            const localVarAxiosArgs = await ActionsApiAxiosParamCreator(configuration).getFlows(actionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} actionId 
         * @param {string} priority 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVariablesInFlow(actionId: string, priority: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GetVariablesInFlow>>> {
            const localVarAxiosArgs = await ActionsApiAxiosParamCreator(configuration).getVariablesInFlow(actionId, priority, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {ActionDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newAction(body: ActionDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ActionModel>>> {
            const localVarAxiosArgs = await ActionsApiAxiosParamCreator(configuration).newAction(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {FlowDto} body 
         * @param {string} actionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newFlow(body: FlowDto, actionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<FlowModel>>> {
            const localVarAxiosArgs = await ActionsApiAxiosParamCreator(configuration).newFlow(body, actionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} actionId 
         * @param {string} flowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFlow(actionId: string, flowId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AcceptDto>>> {
            const localVarAxiosArgs = await ActionsApiAxiosParamCreator(configuration).removeFlow(actionId, flowId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {UpdateActionDto} body 
         * @param {string} actionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAction(body: UpdateActionDto, actionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ActionModel>>> {
            const localVarAxiosArgs = await ActionsApiAxiosParamCreator(configuration).updateAction(body, actionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ActionsApi - factory interface
 * @export
 */
export const ActionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} actionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAction(actionId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AcceptDto>> {
            return ActionsApiFp(configuration).deleteAction(actionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} actionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAction(actionId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ActionModel>> {
            return ActionsApiFp(configuration).getAction(actionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActionType(options?: AxiosRequestConfig): Promise<AxiosResponse<GetActionType>> {
            return ActionsApiFp(configuration).getActionType(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActions(options?: AxiosRequestConfig): Promise<AxiosResponse<GetActionsList>> {
            return ActionsApiFp(configuration).getActions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAvailableActionSource(options?: AxiosRequestConfig): Promise<AxiosResponse<ActionSourceDto>> {
            return ActionsApiFp(configuration).getAvailableActionSource(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} actionId 
         * @param {string} flowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFlow(actionId: string, flowId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<FlowModel>> {
            return ActionsApiFp(configuration).getFlow(actionId, flowId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} actionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFlows(actionId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GetFlows>> {
            return ActionsApiFp(configuration).getFlows(actionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} actionId 
         * @param {string} priority 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVariablesInFlow(actionId: string, priority: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GetVariablesInFlow>> {
            return ActionsApiFp(configuration).getVariablesInFlow(actionId, priority, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ActionDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newAction(body: ActionDto, options?: AxiosRequestConfig): Promise<AxiosResponse<ActionModel>> {
            return ActionsApiFp(configuration).newAction(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FlowDto} body 
         * @param {string} actionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newFlow(body: FlowDto, actionId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<FlowModel>> {
            return ActionsApiFp(configuration).newFlow(body, actionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} actionId 
         * @param {string} flowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFlow(actionId: string, flowId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AcceptDto>> {
            return ActionsApiFp(configuration).removeFlow(actionId, flowId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateActionDto} body 
         * @param {string} actionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAction(body: UpdateActionDto, actionId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ActionModel>> {
            return ActionsApiFp(configuration).updateAction(body, actionId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ActionsApi - object-oriented interface
 * @export
 * @class ActionsApi
 * @extends {BaseAPI}
 */
export class ActionsApi extends BaseAPI {
    /**
     * 
     * @param {string} actionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    public async deleteAction(actionId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AcceptDto>> {
        return ActionsApiFp(this.configuration).deleteAction(actionId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} actionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    public async getAction(actionId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ActionModel>> {
        return ActionsApiFp(this.configuration).getAction(actionId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    public async getActionType(options?: AxiosRequestConfig) : Promise<AxiosResponse<GetActionType>> {
        return ActionsApiFp(this.configuration).getActionType(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    public async getActions(options?: AxiosRequestConfig) : Promise<AxiosResponse<GetActionsList>> {
        return ActionsApiFp(this.configuration).getActions(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    public async getAvailableActionSource(options?: AxiosRequestConfig) : Promise<AxiosResponse<ActionSourceDto>> {
        return ActionsApiFp(this.configuration).getAvailableActionSource(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} actionId 
     * @param {string} flowId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    public async getFlow(actionId: string, flowId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<FlowModel>> {
        return ActionsApiFp(this.configuration).getFlow(actionId, flowId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} actionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    public async getFlows(actionId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GetFlows>> {
        return ActionsApiFp(this.configuration).getFlows(actionId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} actionId 
     * @param {string} priority 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    public async getVariablesInFlow(actionId: string, priority: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GetVariablesInFlow>> {
        return ActionsApiFp(this.configuration).getVariablesInFlow(actionId, priority, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {ActionDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    public async newAction(body: ActionDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<ActionModel>> {
        return ActionsApiFp(this.configuration).newAction(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {FlowDto} body 
     * @param {string} actionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    public async newFlow(body: FlowDto, actionId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<FlowModel>> {
        return ActionsApiFp(this.configuration).newFlow(body, actionId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} actionId 
     * @param {string} flowId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    public async removeFlow(actionId: string, flowId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AcceptDto>> {
        return ActionsApiFp(this.configuration).removeFlow(actionId, flowId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {UpdateActionDto} body 
     * @param {string} actionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    public async updateAction(body: UpdateActionDto, actionId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ActionModel>> {
        return ActionsApiFp(this.configuration).updateAction(body, actionId, options).then((request) => request(this.axios, this.basePath));
    }
}
